COMMONHEADS	= $(shell find src -name '*h' -not -name '*linux*')
COMMONSRCS	= $(shell find src -name '*cpp' -not -name '*iceberg*' -not -name '*linux*')
COMMONOBJS	= $(COMMONSRCS:.cpp=.o) src/ib_resource.o
MAINPACKAGE	= bin/iceberg.exe
TESTPACKAGE	= tests/iceberg_tests.exe

MAINHEADS	= $(COMMONHEADS)
MAINSRCS	= $(COMMONSRCS) src/iceberg.cpp
MAINOBJS	= $(COMMONOBJS) $(MAINSRCS:.cpp=.o)

TESTHEADS	= $(COMMONHEADS) $(shell find tests -name '*h')
TESTSRCS	= $(COMMONSRCS) $(shell find tests -name '*cpp')
TESTOBJS	= $(COMMONOBJS) $(TESTSRCS:.cpp=.o)

ifeq ($(DEBUG),true)
  DEBUGOPT=-DDEBUG -g
  STRIPALL=
else
  DEBUGOPT=
  STRIPALL=strip --strip-all $(MAINPACKAGE)
endif
RM=rm -rf
CP=cp
VIRTUALENV=py -3 -m venv
BINDIR=bin
TESTDIR=tests
LUA_DIR=./ext/lua-5.1.4
LUA_DLL=$(LUA_DIR)/src/lua51.dll

FLTK_CXXFLAGS=$(shell ./ext/fltk-1.3.4/fltk-config --cxxflags) 
FLTK_LDFLAGS=$(shell ./ext/fltk-1.3.4/fltk-config --ldflags)

CC=$(shell ./ext/fltk-1.3.4/fltk-config --cxx)
LD=$(shell ./ext/fltk-1.3.4/fltk-config --cxx)
WINDRES=windres

CPPFLAGS=$(FLTK_CXXFLAGS) -I./src -I./ext/fltk-1.3.4/src -I$(LUA_DIR)/src -I$(LUA_DIR)/etc -I./ext/nanosvg-master/src $(DEBUGOPT) -I./ext/onig-5.9.6 -I./ext/cmigemo-1.3c-MIT/src -O2  -Wall -Wno-deprecated -fthreadsafe-statics -std=gnu++0x -mthreads -D_MT 
LDFLAGS=-static-libgcc -static-libstdc++ -lshlwapi -lnetapi32 -lws2_32 -ld2d1 -lDwrite -lfltk_images $(FLTK_LDFLAGS) -lfltk_png -lfltk_jpeg -lz -L./ext/onig-5.9.6/.libs/ -lonig -static $(LUA_DLL) 

.SUFFIXES: .o .cpp .rc
.PHONY: help clean venv pip docs printvars

# doc: build main package with debug symbols.
all: $(MAINPACKAGE)

test_: $(TESTPACKAGE)

# doc: build test executable
test:
	$(MAKE) DEBUG=true
	$(MAKE) test_

# doc: show this message.
help:
	@awk 'BEGIN{d=""} match($$0, /^# *doc *: */) {d=substr($$0, RSTART+RLENGTH);next} d != "" && match($$0, /[:space:]*[a-zA-Z0-9\-\.\_]+:/) { printf("%-10s\t%s\n", substr($$0, RSTART, RLENGTH), d); d="";next}' build/Makefile_windows

$(TESTPACKAGE): $(TESTOBJS)
	$(LD) $^ -o $@ $(LDFLAGS)
	$(CP) $(LUA_DLL) $(TESTDIR)

$(MAINPACKAGE): $(MAINOBJS)
	$(LD) $^ -o $@ $(LDFLAGS)
	$(STRIPALL)

$(MAINOBJS): $(MAINHEADS)

$(TESTOBJS): $(TESTHEADS)

.cpp.o:
	$(CC) $(CPPFLAGS) -c $< -o $@

.rc.o:
	$(WINDRES) -o $@ $<

# doc: remove all generated files.
clean:
	$(RM) $(PACKAGE) $(MAINOBJS) $(TESTOBJS)
	$(RM) core gmon.out

# doc: build main package with debug symbols.
debug: 
	${MAKE} DEBUG=true

# doc: create release zip files
package:
	./build/make-package-windows.sh

# doc: initialize virtualenv.
venv:
	${VIRTUALENV} .venv

# doc: install python dependencies that are required to generate docs.
pip:
	pip install sphinx

# doc: build documents using the sphinx.
docs:
	sphinx-build -d docs/build/doctrees -b html docs/source docs/build/html

printvars:
	@$(foreach V,$(sort $(.VARIABLES)), $(if $(filter-out environment% default automatic, $(origin $V)),$(warning $V=$($V) )))
