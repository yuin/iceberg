# These packages are required to build the iceberg.
# g++
# gdb
# autoconf
# libpng12-0-dev
# libpng++-dev
# libjpeg8-dev
# libjpeg-turbo8-dev
# libftgl2
# libfontconfig
# libx11-dev
# libglu1-mesa-dev
# libasound2-dev
# libxft-dev
# libonig-dev
# libmigemo-dev

COMMONHEADS	= $(shell find src -name '*h' -not -name '*win*')
COMMONSRCS	= $(shell find src -name '*cpp' -not -name '*iceberg*' -not -name '*win*')
COMMONOBJS	= $(COMMONSRCS:.cpp=.o)
MAINPACKAGE	= bin/iceberg
TESTPACKAGE	= tests/iceberg-tests

MAINHEADS	= $(COMMONHEADS)
MAINSRCS	= $(COMMONSRCS) src/iceberg.cpp
MAINOBJS	= $(COMMONOBJS) $(MAINSRCS:.cpp=.o)

TESTHEADS	= $(COMMONHEADS) $(shell find tests -name '*h')
TESTSRCS	= $(COMMONSRCS) $(shell find tests -name '*cpp')
TESTOBJS	= $(COMMONOBJS) $(TESTSRCS:.cpp=.o)

ifeq ($(DEBUG),true)
  DEBUGOPT=-DDEBUG -g
  STRIPALL=
else
  DEBUGOPT=
  STRIPALL=strip --strip-all $(MAINPACKAGE)
endif

INSTALLDIR=
ifneq "$(wildcard $(XDG_CONFIG_HOME) )" ""
  INSTALLDIR=$(XDG_CONFIG_HOME)/iceberg
else
  ifneq "$(wildcard /home/$(SUDO_USER)/.config )" ""
    INSTALLDIR=/home/$(SUDO_USER)/.config/iceberg
  else
    INSTALLDIR=/home/$(SUDO_USER)/.iceberg
  endif
endif

RM=rm -rf
CP=cp
VIRTUALENV=virtualenv
BINDIR=bin
TESTDIR=tests
ASSETDIR=assets
LUA_DIR=./ext/lua-5.1.4
LUASOCKET_FILES1=./ext/luasocket-2.0.2/src/{http,url,tp,ftp,smtp}.lua
LUASOCKET_FILES2=./ext/luasocket-2.0.2/src/{ltn12,socket,mime}.lua
LUASOCKET_SOCKET_LIB=./ext/luasocket-2.0.2/src/libsocket.so
LUASOCKET_MIME_LIB=./ext/luasocket-2.0.2/src/libmime.so
LUACJSON_FILES=./ext/lua-cjson-2.1.0/cjson.so
LUAFILESYSTEM_FILES=./ext/luafilesystem-1.5.0/src/lfs.so
LUAXML_FILES=./ext/LuaXML_101012/{LuaXml.lua,LuaXML_lib.so}

FLTK_CXXFLAGS=$(shell ./ext/fltk-1.4.2/fltk-config --cxxflags) 
FLTK_LDFLAGS=$(shell ./ext/fltk-1.4.2/fltk-config --ldflags)

CC=$(shell ./ext/fltk-1.4.2/fltk-config --cxx)
LD=$(shell ./ext/fltk-1.4.2/fltk-config --cxx)

CPPFLAGS=$(FLTK_CXXFLAGS) -I./src -I./ext/fltk-1.4.2/src -I$(LUA_DIR)/src -I$(LUA_DIR)/etc -I./ext/nanosvg-master/src $(DEBUGOPT) -O2  -Wall -Wno-deprecated -fthreadsafe-statics -std=gnu++0x

LDFLAGS=$(LUA_DIR)/src/liblua.a -rdynamic -lfltk_images $(FLTK_LDFLAGS) -lpng -ljpeg -lz -lonig

.SUFFIXES: .o .cpp
.PHONY: help clean venv pip docs

# doc: build main package. This target strips all debug symbols.
all: $(MAINPACKAGE)
	$(STRIPALL)

test_: $(TESTPACKAGE)

# doc: build test executable
test:
	$(MAKE) DEBUG=true
	$(MAKE) test_

# doc: install the iceberg into your system.
install: 
	@if [ "${USER}" != "root" ]; then \
	  echo "use 'sudo make install' to install the iceberg"; \
	  exit 1; \
	fi
	$(MAKE)
	install -o root -g root -m 0755 $(MAINPACKAGE) /usr/bin/
	install -o root -g root -m 0755 $(ASSETDIR)/linux/iceberg.desktop /usr/share/applications/
	install -o root -g root -m 0755 ./src/iceberg.svg /usr/share/pixmaps/
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 -d $(INSTALLDIR)
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 -d $(INSTALLDIR)/config.d
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 -d $(INSTALLDIR)/shortcuts
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 -d $(INSTALLDIR)/lualibs
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 -d $(INSTALLDIR)/images
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 -d $(INSTALLDIR)/plugins
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(ASSETDIR)/linux/config.lua $(INSTALLDIR)
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(ASSETDIR)/common/images/* $(INSTALLDIR)/images
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(ASSETDIR)/common/lualibs/icebergsupport.lua $(INSTALLDIR)/lualibs/
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 -d $(INSTALLDIR)/lualibs/socket
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 -d $(INSTALLDIR)/lualibs/mime
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(LUASOCKET_FILES1) $(INSTALLDIR)/lualibs/socket/
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(LUASOCKET_FILES2) $(INSTALLDIR)/lualibs/
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(LUASOCKET_SOCKET_LIB) $(INSTALLDIR)/lualibs/socket/core.so
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(LUASOCKET_MIME_LIB) $(INSTALLDIR)/lualibs/mime/core.so
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(LUACJSON_FILES) $(INSTALLDIR)/lualibs/
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(LUAFILESYSTEM_FILES) $(INSTALLDIR)/lualibs/
	install -o ${SUDO_USER} -g ${SUDO_USER} -m 0755 $(LUAXML_FILES) $(INSTALLDIR)/lualibs/

# doc: show this message.
help:
	@awk 'BEGIN{d=""} match($$0, /^# *doc *: */) {d=substr($$0, RSTART+RLENGTH);next} d != "" && match($$0, /[[:space:]]*[a-zA-Z0-9\-\.\_]+:/) { printf("%-10s\t%s\n", substr($$0, RSTART, RLENGTH), d); d="";next}' build/Makefile_linux

$(TESTPACKAGE): $(TESTOBJS)
	$(LD) $^ -o $@ $(LDFLAGS)
	$(CP) $(LUA_DLL) $(TESTDIR)

$(MAINPACKAGE): $(MAINOBJS)
	$(LD) $^ -o $@ $(LDFLAGS)

$(MAINOBJS): $(MAINHEADS)

$(TESTOBJS): $(TESTHEADS)

.cpp.o:
	$(CC) $(CPPFLAGS) -c $< -o $@

# doc: remove all generated files.
clean:
	$(RM) $(PACKAGE) $(MAINOBJS) $(TESTOBJS)
	$(RM) core gmon.out

# doc: build main package with debug symbols.
debug: 
	${MAKE} DEBUG=true

# doc: initialize virtualenv.
venv:
	${VIRTUALENV} .venv

# doc: install python dependencies that are required to generate docs.
pip:
	pip install sphinx

# doc: build documents using the sphinx.
docs:
	sphinx-build -d docs/build/doctrees -b html docs/source docs/build/html

